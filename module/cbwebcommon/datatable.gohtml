{{- /*gotype: github.com/codingbeard/cbweb/module/cbwebcommon.DataTable*/ -}}
{{ define "-global-/cbwebcommon/datatable.gohtml" }}
<script type="text/javascript">
  //replace all of the headers with search boxes
  $('#{{.GetTableId}} .material-table-searchable').each(
    function () {
      var title = $('#{{.GetTableId}} .material-table-searchable').eq($(this).index()).text();
      $(this).html(
        '<input style="width: auto;" type="text" name="' + title + '" placeholder="' + title + '" />');
    }
  );

  // DataTable
  var {{.GetTableId}} = $('#{{.GetTableId}}').DataTable(
    {
        {{if .HasData}}
      data:        {{.GetDataJson}},
        {{end}}
        {{if .IsAjax}}
      ajax:        {{.GetAjaxRoute}},
        {{end}}
      "oLanguage": {
        "sInfo":       "_START_ -_END_ of _TOTAL_",
        "sLengthMenu": '<span>Rows per page:</span><select class="browser-default">' +
          '<option value="10">10</option>' +
          '<option value="20">20</option>' +
          '<option value="30">30</option>' +
          '<option value="40">40</option>' +
          '<option value="50">50</option>' +
          '<option value="-1">All</option>' +
          '</select></div>'
      },
      buttons: [
        {
          extend:   'csv',
          filename: '{{.GetTableId}}',
          text:     '<i class="material-icons">file_download</i>'
        }
      ],
      bAutoWidth:  false
    }
  );

  $('.dataTables_filter').remove();

  // Used to figure out the index of the columns by name
  var columnNames = {{.GetColumnsJson}};

  // stores all active filters
  var filters = {};
  // filted out columnFilter query objects which could have been pasted in from link so we can remove them if the filter is changed
  var preExistingUrl = window.location.href.replace(/columnFilter\[[^\]]+\]=[^&]+/g, '');

  // attach the filter function to each of the inputs
  {{.GetTableId}}.columns().eq(0).each(
    function (colIdx) {
      $('input', {{.GetTableId}}.column(colIdx).header()).on('keyup change', function () {
          updateQuery(colIdx, $(this).attr('name'), this.value);
        }
      );
    }
  );

  // Used to get columnFilters if the user pasted in a link containing filters
  function parseQuery(qstr)
  {
    var query = {};
    var a = (qstr[0] === '?' ? qstr.substr(1) : qstr).split('&');
    for (var i = 0; i < a.length; i++)
    {
      var b = a[i].split('=');
      query[decodeURIComponent(b[0])] = decodeURIComponent(b[1] || '');
    }
    return query;
  }

  // Apply any filters which were pasted into the url
  var query = parseQuery(window.location.search);
  $.each(query, function (k, v) {
    if (k.indexOf('columnFilter[') !== -1)
    {
      var columnName = k.replace(/columnFilter\[([^\]]+)\]/g, "$1");

      if (columnNames.indexOf(columnName) !== -1)
      {
        updateQuery(columnNames.indexOf(columnName), columnName, v);
        $('input[name="' + columnName + '"]').val(v);
      }
    }
  });

  // Update the column search
  function updateQuery(colIdx, name, value)
  {
    {{.GetTableId}}.column(colIdx)
      .search(value)
      .draw();

    if (value != '')
    {
      filters[name] = value;
    }
    else
    {
      delete filters[name];
    }

    $('#filters-enabled').empty();

    $.each(filters, function (k, v) {
      $('#filters-enabled').append('<li>' + k + ': ' + v + '</li>');
    });

    if (history.pushState)
    {
      var filterString = '';

      $.each(filters, function (k, v) {
        filterString += 'columnFilter[' + k + ']=' + encodeURI(v) + '&'
      });

      if (filterString.length)
      {
        if (preExistingUrl.indexOf('?') !== -1)
        {
          if (preExistingUrl.substring(preExistingUrl.length - 1) == '&')
          {
            var newurl = preExistingUrl + filterString.substring(
              0, filterString.length - 1);
          }
          else
          {
            var newurl = preExistingUrl + '&' + filterString.substring(
              0, filterString.length - 1);
          }

        }
        else
        {
          var newurl = preExistingUrl + '?' + filterString.substring(
            0, filterString.length - 1);
        }
        window.history.pushState({path: newurl}, '', newurl);
      }
      else
      {
        window.history.pushState({path: preExistingUrl}, '', preExistingUrl);
      }
    }
  }
</script>
{{end}}